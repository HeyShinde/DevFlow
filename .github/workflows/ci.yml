name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-and-build:
    name: validate-and-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'
          cache: 'npm'
          cache-dependency-path: 'devflow/package-lock.json'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Clean install with explicit dependency installation
      - name: Install extension dependencies
        working-directory: devflow
        run: |
          npm ci
          # Ensure type definitions are explicitly installed
          npm install --save-dev @types/vscode@^1.101.0 @types/node@24.0.4 typescript@^5.8.3

      - name: Verify TypeScript setup
        working-directory: devflow
        run: |
          echo "üì¶ TypeScript version:"
          npx tsc --version
          echo "üì¶ Checking critical type definitions:"
          ls -la node_modules/@types/vscode/ && echo "‚úÖ @types/vscode found" || echo "‚ùå @types/vscode missing"
          ls -la node_modules/@types/node/ && echo "‚úÖ @types/node found" || echo "‚ùå @types/node missing"
          echo "üì¶ TypeScript configuration:"
          npx tsc --showConfig

      - name: Install backend dependencies
        working-directory: devflow/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install vsce
        run: npm install -g @vscode/vsce

      # Test TypeScript compilation first
      - name: Test TypeScript compilation
        working-directory: devflow
        run: |
          echo "üî® Testing TypeScript compilation..."
          npx tsc --noEmit --project tsconfig.json

      - name: Build extension
        working-directory: devflow
        run: npm run compile

      - name: Lint code
        working-directory: devflow
        run: npm run lint
        continue-on-error: true

      - name: Package extension
        working-directory: devflow
        run: vsce package --no-dependencies

      - name: Verify package creation
        working-directory: devflow
        run: |
          echo "üì¶ Checking for .vsix files:"
          ls -la *.vsix && echo "‚úÖ Extension packaged successfully" || (echo "‚ùå Extension packaging failed" && exit 1)

      - name: Upload extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-${{ github.sha }}
          path: devflow/*.vsix
          retention-days: 30

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ github.sha }}
          path: devflow/backend/
          retention-days: 30

  build-and-push-container:
    name: build-and-push-container
    needs: [validate-and-build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./devflow/backend
          file: ./devflow/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=DevFlow Backend - AI-powered code search and analysis
            org.opencontainers.image.licenses=MIT
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-github-release:
    name: create-github-release
    needs: [validate-and-build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download extension artifact
        uses: actions/download-artifact@v4
        with:
          name: extension-${{ github.sha }}
          path: dist/

      - name: Verify extension artifact
        run: |
          if [ ! -f dist/*.vsix ]; then
            echo "‚ùå Extension artifact not found. Listing contents:"
            ls -la dist/
            exit 1
          else
            echo "‚úÖ Extension artifact found: $(ls dist/)"
          fi

      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: ".github/changelog-config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.build_changelog.outputs.changelog || 'Release notes will be added soon.' }}
          files: dist/*
          draft: false
          prerelease: false

  publish-docs-to-gh-pages:
    name: publish-docs-to-gh-pages
    needs: [validate-and-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install mkdocs-material pymdown-extensions

      - name: Build docs
        run: |
          if [ -f docs/mkdocs.yml ]; then
            mkdocs build -f docs/mkdocs.yml
          else
            echo "‚ö†Ô∏è mkdocs.yml not found, skipping docs build"
            mkdir -p docs/site
            echo "<h1>Documentation coming soon</h1>" > docs/site/index.html
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs/site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  security-scan:
    name: security-scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  publish-extension:
    name: publish-extension
    needs: [validate-and-build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'

      - name: Install vsce
        run: npm install -g @vscode/vsce

      - name: Download extension artifact
        uses: actions/download-artifact@v4
        with:
          name: extension-${{ github.sha }}
          path: dist/

      - name: Publish to VS Code Marketplace
        run: |
          if [ -f dist/*.vsix ]; then
            cd devflow
            vsce publish -p ${{ secrets.VSCE_PAT }} --packagePath ../dist/*.vsix
          else
            echo "‚ùå No .vsix file found for publishing"
            exit 1
          fi
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

  notify:
    name: notify
    needs: [validate-and-build, build-and-push-container, create-github-release, publish-docs-to-gh-pages]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ All CI/CD jobs completed successfully!"
          echo "üöÄ Release: ${{ github.ref }}"
          echo "üì¶ Container: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "üìö Docs: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå CI/CD pipeline failed!"
          echo "üîç Check the logs for more details"